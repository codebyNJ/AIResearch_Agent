import streamlit as st
import os
import re
import requests
from markdownify import markdownify
from requests.exceptions import RequestException
from smolagents import tool, CodeAgent, ToolCallingAgent, HfApiModel, DuckDuckGoSearchTool
from dotenv import load_dotenv
import time
from datetime import datetime

# Load environment variables from .env file
load_dotenv()

# Set page configuration
st.set_page_config(
    page_title="Agentic AI Research Assistant",
    page_icon="ðŸ¤–",
    layout="wide"
)

# CSS to improve the appearance
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        margin-bottom: 1rem;
    }
    .subheader {
        font-size: 1.5rem;
        margin-bottom: 1rem;
    }
    .results-container {
        background-color: #f0f2f6;
        padding: 20px;
        border-radius: 10px;
        margin-top: 20px;
    }
    .info-text {
        color: #616A6B;
        font-size: 0.9rem;
    }
    .justified-text {
        text-align: justify;
        line-height: 1.6;
        font-size: 1.1rem;
    }
</style>
""", unsafe_allow_html=True)

# App header
st.markdown("<h1 class='main-header'>Agentic AI Research Assistant</h1>", unsafe_allow_html=True)
st.markdown("<p>Powered by smolagents and Qwen2.5-Coder</p>", unsafe_allow_html=True)

# Function definitions
@tool
def visit_webpage(url: str) -> str:
    """Visits a webpage at the given URL and returns its content as a markdown string.
    Args:
        url: The URL of the webpage to visit.
    Returns:
        The content of the webpage converted to Markdown, or an error message if the request fails.
    """
    try:
        # Send a GET request to the URL
        response = requests.get(url)
        response.raise_for_status()  # Raise an exception for bad status codes
        # Convert the HTML content to Markdown
        markdown_content = markdownify(response.text).strip()
        # Remove multiple line breaks
        markdown_content = re.sub(r"\n{3,}", "\n\n", markdown_content)
        return markdown_content
    except RequestException as e:
        return f"Error fetching the webpage: {str(e)}"
    except Exception as e:
        return f"An unexpected error occurred: {str(e)}"

# Check for HF token
def check_token():
    hf_token = os.getenv("HF_TOKEN")
    if not hf_token:
        st.error("HF_TOKEN not found in .env file. Please add it and restart the application.")
        st.info("Create a .env file in the same directory with the following content: HF_TOKEN=your_huggingface_token_here")
        st.stop()
    return hf_token

# Initialize agents function
def initialize_agents():
    # Get the HF token from environment variables
    hf_token = check_token()
    
    # Model configuration
    model_id = "Qwen/Qwen2.5-Coder-32B-Instruct"
    
    # Set the token in environment variable for HF client to use
    os.environ["HF_TOKEN"] = hf_token
    
    with st.spinner("Initializing model and agents..."):
        # Initialize the model without directly passing the token
        model = HfApiModel(model_id)
        
        # Initialize the web agent
        web_agent = ToolCallingAgent(
            tools=[DuckDuckGoSearchTool(), visit_webpage],
            model=model,
            max_steps=10,
            name="web_search_agent",
            description="Runs web searches for you."
        )
        
        # Initialize the manager agent
        manager_agent = CodeAgent(
            tools=[],
            model=model,
            managed_agents=[web_agent],
            additional_authorized_imports=["time", "numpy", "pandas"],
        )
    
    return manager_agent

# Function to format the output for display and download
def format_output(query, answer):
    """Formats the query and answer into a well-structured, justified text format."""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    formatted_output = f"""
# LLM Research Assistant Report  
**Date:** {timestamp}  
**Query:** {query}  

---

## Research Results  

{answer}  

---

**Note:** This report was generated by the LLM Research Assistant powered by smolagents and Qwen2.5-Coder.
"""
    return formatted_output

# Sidebar for app controls
with st.sidebar:
    st.markdown("<h2 class='subheader'>Settings</h2>", unsafe_allow_html=True)
    
    if st.button("Check HF Token"):
        token = check_token()
        if token:
            st.success("HF Token found in .env file!")
    
    st.markdown("### About")
    st.markdown("""
    This application uses the smolagents library and Qwen2.5-Coder-32B-Instruct model to:
    
    * Run web searches
    * Visit and extract content from webpages
    * Execute code to answer complex questions
    
    """)



# Input area for the user question
query = st.text_area(
    "Enter your research question:",
    height=100,
    placeholder="Example: If LLM training continues to scale up at the current rhythm until 2030, what would be the electric power in GW required to power the biggest training runs by 2030?"
)

# Date filter input
date_filter = st.text_input(
    "Enter date filter (e.g., '2023-10-01' or 'past month'):",
    placeholder="Optional: Specify a date or time range for the search."
)

# Region filter input
region_filter = st.text_input(
    "Enter region filter (e.g., 'us-en' for US English):",
    placeholder="Optional: Specify a region for the search."
)

# Run button
run_pressed = st.button("Run Research", type="primary")

# Process the query when the run button is pressed
if run_pressed and query:
    # Progress and results
    with st.container():
        # Initialize the progress bar
        progress_bar = st.progress(0)
        status_text = st.empty()
        
        # Initialize agents
        try:
            status_text.text("Initializing agents...")
            manager_agent = initialize_agents()
            
            # Update progress
            progress_bar.progress(10)
            status_text.text("Agents initialized. Processing your query...")
            
            # Run the query with the manager agent
            answer_container = st.empty()
            answer_container.info("Running your query. This may take a while depending on the complexity...")
            
            # Process with intermediate updates
            for i in range(10, 100, 10):
                # Simulate intermediate progress
                progress_bar.progress(i)
                time.sleep(0.5)  # Just to show progress visually
            
            # Add date and region filters to the query
            search_query = query
            if date_filter:
                search_query += f" (date: {date_filter})"
            if region_filter:
                search_query += f" (region: {region_filter})"
            
            # Run the actual query
            answer = manager_agent.run(search_query)
            
            # Complete progress and show result
            progress_bar.progress(100)
            status_text.text("Research complete!")
            
            # Format the output for display
            formatted_output = format_output(query, answer)
            
            # Display the results
            st.markdown("<div class='results-container'>", unsafe_allow_html=True)
            st.markdown("### Research Results")
            st.markdown(f"<div class='justified-text'>{formatted_output}</div>", unsafe_allow_html=True)
            st.markdown("</div>", unsafe_allow_html=True)
            
            # Add a download button
            st.download_button(
                label="Download Research Report",
                data=formatted_output,
                file_name=f"research_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                mime="text/plain"
            )
            
        except Exception as e:
            st.error(f"An error occurred: {str(e)}")
            st.info("Please check your HF token and internet connection, then try again.")
            
else:
    if run_pressed and not query:
        st.warning("Please enter a research question before running.")

# Instructions at the bottom
st.markdown("---")
st.markdown("<p class='info-text'>Note: For this app to work, create a .env file in the same directory with your HF_TOKEN.</p>", unsafe_allow_html=True)
